bool canBeValid(char *s, char *locked) {
    int n = strlen(s);
    if (n % 2 != 0)
     return false;

    int open = 0, close = 0, unlocked1 = 0, unlocked2 = 0;
    for (int i = 0; i < n; i++) {
        if (locked[i] == '0')
         unlocked1++;

        else if (s[i] == '(')
         open++;

        else if (s[i] == ')')
         open--;

        if (open + unlocked1 < 0)
         return false;

        int j = n - i - 1;
        if (locked[j] == '0')
         unlocked2++;

        else if (s[j] == ')')
         close++;

        else if (s[j] == '(') 
        close--;

        if (close + unlocked2 < 0)
         return false;
    }
    return true;
}

int maxDistance(int** arrays, int arraysSize, int* arraysColSize){
    int minVal = arrays[0][0];
    int maxVal = arrays[0][arraysColSize[0] - 1];
    int maxDistance = 0;

    for (int i = 1; i < arraysSize; i++) {
        int currentMin = arrays[i][0];
        int currentMax = arrays[i][arraysColSize[i] - 1];

        if (abs(currentMax - minVal) > maxDistance)
            maxDistance = abs(currentMax - minVal);
        if (abs(maxVal - currentMin) > maxDistance)
            maxDistance = abs(maxVal - currentMin);

        if (currentMin < minVal)
            minVal = currentMin;
        if (currentMax > maxVal)
            maxVal = currentMax;
    }

    return maxDistance;
}

long long maxPoints(int** points, int pointsSize, int* pointsColSize) {
    int rows = pointsSize;
    int cols = pointsColSize[0];
    
    long long *previousRow = (long long*)malloc(sizeof(long long) * cols);
    long long *currentRow = (long long*)malloc(sizeof(long long) * cols);

    for (int col = 0; col < cols; ++col) {
        previousRow[col] = points[0][col];
    }

    for (int row = 1; row < rows; ++row) {
        long long *leftMax = (long long*)malloc(sizeof(long long) * cols);
        long long *rightMax = (long long*)malloc(sizeof(long long) * cols);

        leftMax[0] = previousRow[0];
        for (int col = 1; col < cols; ++col) {
            leftMax[col] = (leftMax[col - 1] > previousRow[col] + 1) ? leftMax[col - 1] - 1 : previousRow[col];
        }

        rightMax[cols - 1] = previousRow[cols - 1];
        for (int col = cols - 2; col >= 0; --col) {
            rightMax[col] = (rightMax[col + 1] > previousRow[col] + 1) ? rightMax[col + 1] - 1 : previousRow[col];
        }

        for (int col = 0; col < cols; ++col) {
            currentRow[col] = points[row][col] + (leftMax[col] > rightMax[col] ? leftMax[col] : rightMax[col]);
        }

        free(leftMax);
        free(rightMax);

        long long *temp = previousRow;
        previousRow = currentRow;
        currentRow = temp;
    }

    long long maxPoints = LLONG_MIN;
    for (int col = 0; col < cols; ++col) {
        if (previousRow[col] > maxPoints) {
            maxPoints = previousRow[col];
        }
    }

    free(previousRow);
    free(currentRow);

    return maxPoints;
}

int nthUglyNumber(int n) {
    int ugly[n]; 
    ugly[0] = 1;
    
    int i2 = 0, i3 = 0, i5 = 0;
    
    for (int i = 1; i < n; i++) {
        int next2 = ugly[i2] * 2;
        int next3 = ugly[i3] * 3;
        int next5 = ugly[i5] * 5;
        
        int next_ugly = (next2 < next3) ? 
                        ((next2 < next5) ? next2 : next5) : 
                        ((next3 < next5) ? next3 : next5);
        
        ugly[i] = next_ugly;
        
        if (next_ugly == next2) i2++;
        if (next_ugly == next3) i3++;
        if (next_ugly == next5) i5++;
    }
    
    return ugly[n-1];
}

int minSteps(int n) {
    if(n==1)
        return 0;
      
    string org="A",copy="";
    int count=0;
    
    while(org.length()!=n){
        if(copy.empty())
            copy=org;
        else{
            if(n%org.length()==0 && org!=copy)
                copy=org;
            else
                org+=copy;
            
        }
       count++; 
    }
    return count;
}

int* sum;
int** hash;
int N;

int finder(int* piles, int start, int M) {
    if (start == N) {
        return 0;
    }
    // The remaining size <= max stones we can take
    if (N - start <= 2 * M) {
        return sum[start];
    }
    // This cell has already been filled
    if (hash[start][M] != 0) {
        return hash[start][M];
    }

    int opponent = INT_MAX; // The minimum stone your opponent can take
    for (int i = 1; i <= 2 * M; i++) {
        if (start + i < N) {
            int opponent_value = finder(piles, start + i, M > i ? M : i);
            if (opponent_value < opponent) {
                opponent = opponent_value;
            }
        }
    }

    hash[start][M] = sum[start] - opponent;
    return hash[start][M];
}

int stoneGameII(int* piles, int pilesSize) {
    N = pilesSize;
    if (N == 0) {
        return 0;
    }

    // Allocate memory for sum array
    sum = (int*)malloc(N * sizeof(int));
    if (sum == NULL) {
        return -1; // Error in allocation
    }

    // Fill sum array
    for (int i = N - 1; i >= 0; i--) {
        sum[i] = piles[i];
        if (i + 1 < N) {
            sum[i] += sum[i + 1];
        }
    }

    // Allocate memory for hash table
    hash = (int**)malloc(N * sizeof(int*));
    if (hash == NULL) {
        free(sum); // Free sum if hash allocation fails
        return -1;
    }

    for (int i = 0; i < N; i++) {
        hash[i] = (int*)calloc(N, sizeof(int)); // Initialize hash with zeros
        if (hash[i] == NULL) {
            for (int j = 0; j < i; j++) {
                free(hash[j]); // Free previous allocations on failure
            }
            free(hash);
            free(sum);
            return -1;
        }
    }

    int result = finder(piles, 0, 1);

    // Free allocated memory
    for (int i = 0; i < N; i++) {
        free(hash[i]);
    }
    free(hash);
    free(sum);

    return result;
}

void removeDups(char *s) {
    int idx = 1;
    for(int i = 1; s[i]; i++) {
        if(s[i] != s[i-1]) {
            s[idx++] = s[i];
        }
    }    
    s[idx] = '\0';
}

int minTurns(char *s, int len, int start, int end, int **cache) {
    
    // base case: empty string
    if(start > end) return 0;
    
    // result already cached
    if(-1 != cache[start][end]) return cache[start][end];
    
    // worst case: print all chars
    int turns = 1 + minTurns(s, len, start + 1, end, cache);
    
    // optimize the matching chars
    for(int i = start + 1; i <= end; i++) {
        // matching chars: split the matching turns 
        if(s[start] == s[i]) {
            int matchingTurns = minTurns(s, len, start, i - 1, cache) +
                                minTurns(s, len, i + 1, end, cache);
            turns = fmin(turns, matchingTurns);
        }
    }
    
    // cache the result for this state
    cache[start][end] = turns;
    return cache[start][end];
}

int strangePrinter(char* s) {
    
    // remove duplicates
    removeDups(s);
    
    // cache to store the results 
    int len = strlen(s);
    int **cache = malloc(sizeof(int *) * len);
    for(int i = 0; i < len; i++) {
        cache[i] = malloc(sizeof(int) * len);
        memset(cache[i], -1, sizeof(int) * len);        
    }
    
    // recursively get the minimum turns required 
    return minTurns(s, len, 0, len - 1, cache);
}

int findComplement(int num){
    return pow(2, (int)(log2(num) / log2(2)) + 1) - 1 - num;
}

int FindGCD(int a, int b) {
    if (a == 0) return b;
    return FindGCD(b % a, a);
}

char* fractionAddition(char* expression) {
    int num = 0;
    int denom = 1;

    int i = 0;
    while (i < strlen(expression)) {
        int currNum = 0;
        int currDenom = 0;

        int isNegative = 0;

        // check for sign
        if (expression[i] == '-' || expression[i] == '+') {
            if (expression[i] == '-') {
                isNegative = 1;
            }
            // move to next character
            i++;
        }

        // build numerator
        while (isdigit(expression[i])) {
            int val = expression[i] - '0';
            currNum = currNum * 10 + val;
            i++;
        }

        if (isNegative) currNum *= -1;

        // skip divisor
        i++;

        // build denominator
        while (i < strlen(expression) && isdigit(expression[i])) {
            int val = expression[i] - '0';
            currDenom = currDenom * 10 + val;
            i++;
        }

        // add fractions together using common denominator
        num = num * currDenom + currNum * denom;
        denom = denom * currDenom;
    }

    int gcd = abs(FindGCD(num, denom));

    // reduce fractions
    num /= gcd;
    denom /= gcd;

    // Prepare the result string
    char* result = (char*)malloc(20 * sizeof(char));
    sprintf(result, "%d/%d", num, denom);
    return result;
}

long halfToPalindrome(long left, int even) {
    long res = left;
    if (!even) left = left / 10;
    while (left > 0) {
        res = res * 10 + left % 10;
        left /= 10;
    }
    return res;
}

char* nearestPalindromic(char* n) {
    int len = strlen(n);
    int i = len % 2 == 0 ? len / 2 - 1 : len / 2;
    long firstHalf = atol(strndup(n, i + 1)); // Convert substring to long
    /*
    Generate possible palindromic candidates:
    1. Create a palindrome by mirroring the first half.
    2. Create a palindrome by mirroring the first half incremented by 1.
    3. Create a palindrome by mirroring the first half decremented by 1.
    4. Handle edge cases by considering palindromes of the form 999...
       and 100...001 (smallest and largest n-digit palindromes).
    */
    long possibilities[5];
    possibilities[0] = halfToPalindrome(firstHalf, len % 2 == 0);
    possibilities[1] = halfToPalindrome(firstHalf + 1, len % 2 == 0);
    possibilities[2] = halfToPalindrome(firstHalf - 1, len % 2 == 0);
    possibilities[3] = (long)pow(10, len - 1) - 1;
    possibilities[4] = (long)pow(10, len) + 1;

    long diff = LONG_MAX, res = 0, nl = atol(n);
    for (int j = 0; j < 5; j++) {
        long cand = possibilities[j];
        if (cand == nl) continue;
        if (labs(cand - nl) < diff) {
            diff = labs(cand - nl);
            res = cand;
        } else if (labs(cand - nl) == diff) {
            res = fmin(res, cand);
        }
    }

    char* result = (char*)malloc(20 * sizeof(char)); // Allocate memory for result
    sprintf(result, "%ld", res); // Convert long to string
    return result;
}

#define maxN 200

void post(struct TreeNode* root, int* arr, int* idx) {
    if (root == NULL) {
        return;
    }
    post(root->left, arr, idx);
    post(root->right, arr, idx);
    arr[(*idx)++] = root->val;
}

int* postorderTraversal(struct TreeNode* root, int* returnSize) {
    int* arr = (int*)malloc(maxN * sizeof(int));
    int idx = 0;
    post(root, arr, &idx);
    *returnSize = idx;
    return arr;
}

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize){

*returnSize=2;// der zu returnende array hat 2 elemente

int *array = malloc(2*sizeof(int) ); // Output array max 2 elemente

for (int i=0; i<numsSize;i++)
{
    for( int j=1+i;j<numsSize;j++)
    {
        if(nums[i] + nums[j] == target)
        {
        array[0]=i;
        array[1]=j;
        return array;
        }
    }   
    
}
return -1;

}

bool scanIsland(int** grid1, int** grid2, short row, short col, short n, short m){
    grid2[row][col] = 2;
    bool subIsland = 1;

    if(row > 0 && grid2[row - 1][col] == 1)
        subIsland &= grid1[row - 1][col] ? scanIsland(grid1, grid2, row - 1, col, n, m) : 0;

    if(col > 0 && grid2[row][col - 1] == 1)
        subIsland &= grid1[row][col - 1] ? scanIsland(grid1, grid2, row, col - 1, n, m) : 0;

    if(row < n - 1 && grid2[row + 1][col] == 1)
        subIsland &= grid1[row + 1][col] ? scanIsland(grid1, grid2, row + 1, col, n, m) : 0;

    if(col < m - 1 && grid2[row][col + 1] == 1)
        subIsland &= grid1[row][col + 1] ? scanIsland(grid1, grid2, row, col + 1, n, m) : 0;

    return subIsland;
}

int countSubIslands(int** grid1, int grid1Size, int* grid1ColSize, int** grid2, int grid2Size, int* grid2ColSize) {
    short i, j, n = grid1Size, m = grid1ColSize[0], res = 0;

    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            if(grid1[i][j] && grid2[i][j] == 1)
                res += scanIsland(grid1, grid2, i, j, n, m);

    return res;
}

#define vector(ptr, type, size) \
    (ptr = malloc(size * sizeof(type))) 

#define swap(a,b) \
    do {          \
        __typeof(a) temp = (a); \
        a = (b);  \
        b = temp; \
    } while(0)

int findPar(int a, int *pair)
{
    if(pair[a] == a) 
        return a;
    return pair[a] = findPar(pair[a], pair);
}

void merge(int a, int b, int *pair, int *bePairCounts)
{
    a = findPar(a, pair);
    b = findPar(b, pair);

    if (a != b) {
        if(bePairCounts[a] < bePairCounts[b]) 
            swap(a,b);
        pair[b] = a;
        bePairCounts[a] += bePairCounts[b];
    }
}

int removeStones(int **stones, int stonesSize, int *stonesColSize)
{
    int ans = 0;
    int *pair, *bePairCounts;
    vector(pair, int, stonesSize);
    vector(bePairCounts, int, stonesSize);

    // init. pair: self trace self
    for(int i = 0; i < stonesSize; i++) 
        pair[i] = i;
    
    // init. bePairCounts = {[...] = 1}
    for(int i = 0; i < stonesSize; i++) 
        bePairCounts[i] = 1;
    
    int row_seen[10001] = {[0 ... 10000] = -1}, \
        col_seen[10001] = {[0 ... 10000] = -1};

    for (int i = 0; i < stonesSize; i++) {
        if(row_seen[stones[i][0]] != -1)
            merge(row_seen[stones[i][0]], i, pair, bePairCounts);
        else 
            row_seen[stones[i][0]] = i;

        if(col_seen[stones[i][1]] != -1)
            merge(col_seen[stones[i][1]], i, pair, bePairCounts);
        else 
            col_seen[stones[i][1]] = i;
    }

    for(int i = 0; i < stonesSize; i++)
        if(pair[i] == i) 
            ans += (bePairCounts[i] - 1);

    return ans;
}

